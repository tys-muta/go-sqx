# 共通設定

# SQLite 関連の設定
[sqlite.gen]
  # 表ファイルのカラムに datetime が指定されているものの、タイムゾーンを含まないフォーマットの場合に適用するタイムゾーン
  timezone = "Asia/Tokyo"

  # 表ファイルがローカルに存在する場合に指定
  [sqlite.gen.local]
    path = "example/xlsx"

  # 表ファイルが Git リポジトリに存在する場合に指定
  [sqlite.gen.remote]
    repo = "https://github.com/tys-muta/go-sqx.git" # 対象のリポジトリ
    refs = "refs/tags/vx.x.x" # 対象の参照情報
    basicAuth = { username = "xxx", password = "ghp_xxx" }

  # 表ファイル自体に関する情報
  [sqlite.gen.head]
    ext = ".xlsx" # 対象となる表ファイルの拡張子
    path = "example/xlsx" # 取り込みの起点となるリポジトリルートからのパス
    columnNameRow = 3 # カラム名が定義されている行数
    columnTypeRow = 2 # カラムの型が定義されている行数 ( string, datetime, int, float )

  # 表ファイルのレコードに関する情報
  [sqlite.gen.body]
    ext = ".xlsx" # 対象となる表ファイルの拡張子
    path = "example/xlsx" # 取り込みの起点となるリポジトリルートからのパス
    startRow = 4 # 取り込みを開始する行数

  # 表ファイルが .xlsx の場合の設定
  [sqlite.gen.xlsx]
    sheet = "データ" # 取り込み対象のシート名

  # 以降は sqlite.gen.table."/path" というルールでテーブルごとの設定を記述する

  [sqlite.gen.table]
    ["/standard"]
      primaryKey = ["id"]
      uniqueKeys = [
        ["floatColumn", "datetimeColumn"],
      ]
      indexKeys = [
        ["stringColumn"],
        ["intColumn", "floatColumn"],
      ]

    ["/child"]
      foreignKeys
        column = "standardId"
        reference = "standard(id)"

  [[sqlite.gen.table."/shard/int"]]
    primaryKey = ["typeId", "id"]
    # shardXXX は、ファイルを分割している場合の設定
    shardColumnName = "typeId" # ファイルに含まれるデータを格納する SQLite テーブルは、ここで指定した名称のカラムを持つ
    shardColumnType = "int" # ファイル名はこの型として格納される

  [[sqlite.gen.table."/shard/string"]]
    primaryKey = ["type", "id"]
    shardColumnName = "type"
    shardColumnType = "string"
